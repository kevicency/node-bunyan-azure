// Generated by LiveScript 1.2.0
var azure, uuid, EventEmitter, isType, merge, flatten, AzureStream;
azure = require('azure');
uuid = require('node-uuid');
EventEmitter = require('events').EventEmitter;
isType = require('prelude-ls').isType;
module.exports.merge = merge = function(dest, src, prefix){
  var key, value;
  for (key in src) {
    value = src[key];
    dest[prefix + "_" + key] = value;
  }
  return dest;
};
module.exports.flatten = flatten = function(entity){
  var merged, key, value;
  merged = false;
  for (key in entity) {
    value = entity[key];
    if (value == null) {
      entity[key] = '';
    }
    if (isType('Object', value)) {
      merge(entity, value, key);
      delete entity[key];
      merged = true;
    }
  }
  if (merged) {
    flatten(entity);
  }
  return entity;
};
module.exports.AzureStream = AzureStream = (function(superclass){
  var prototype = extend$((import$(AzureStream, superclass).displayName = 'AzureStream', AzureStream), superclass).prototype, constructor = AzureStream;
  function AzureStream(arg$){
    var ref$, account, access_key, this$ = this;
    ref$ = arg$ != null
      ? arg$
      : {}, account = ref$.account, access_key = ref$.access_key, this.table = ref$.table;
    this.client = azure.createTableService(account, access_key);
    this.client.createTableIfNotExists(this.table, function(err){
      var that;
      if ((that = err) != null) {
        return this$.emit('error', that);
      }
    });
    this.writable = true;
    EventEmitter.call(this);
  }
  prototype.write = function(record, encoding, done){
    var entity, this$ = this;
    if (!this.writable) {
      throw new Error('AzureStream not writable');
    }
    record = JSON.parse(record);
    entity = import$({
      RowKey: uuid.v4(),
      PartitionKey: record.name
    }, record);
    return this.client.insertEntity(this.table, entity, function(err){
      var that;
      if ((that = err) != null) {
        this$.emit('error', that);
      }
      return typeof done === 'function' ? done() : void 8;
    });
  };
  prototype.end = function(){
    return this.writable = false;
  };
  prototype.destroy = function(){
    this.writable = false;
    return this.emit('close');
  };
  prototype.destroySoon = function(){
    return this.destroy();
  };
  return AzureStream;
}(EventEmitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}