// Generated by LiveScript 1.2.0
var chai, sinon, sinonChai, expect, _it, azure, ref$, AzureStream, flatten, merge, createDefaultStream;
chai = require('chai');
sinon = require('sinon');
sinonChai = require('sinon-chai');
expect = chai.expect;
_it = it;
chai.use(sinonChai);
azure = require('azure');
ref$ = require('./index'), AzureStream = ref$.AzureStream, flatten = ref$.flatten, merge = ref$.merge;
createDefaultStream = function(){
  return new AzureStream({
    account: 'user',
    access_key: 'secret',
    table: 'logs'
  });
};
describe('flatten', function(){
  _it('replaces nulls with empty string', function(){
    return expect(flatten({
      foo: void 8
    })).to.have.property('foo', '');
  });
  _it('merges complex properties', function(){
    return expect(flatten({
      foo: {
        bar: 'baz'
      }
    })).to.have.property('foo_bar', 'baz');
  });
  _it('removes complex property after merge', function(){
    return expect(flatten({
      foo: {
        bar: 'baz'
      }
    })).to.not.have.property('foo');
  });
  return _it('works with complex object', function(){
    var obj, expected;
    obj = {
      foo: 1,
      bar: void 8,
      baz: {
        qux: 'quux',
        gorge: void 8
      },
      very: {
        deeply: {
          nested: 'idd'
        }
      }
    };
    expected = {
      foo: 1,
      bar: '',
      baz_qux: 'quux',
      baz_gorge: '',
      very_deeply_nested: 'idd'
    };
    return expect(flatten(obj)).to.be.eql(expected);
  });
});
describe('AzureStream', function(){
  var client;
  beforeEach(function(){
    client = {
      createTableIfNotExists: function(){},
      insertEntity: function(){}
    };
    return sinon.stub(azure, 'createTableService').returns(client);
  });
  afterEach(function(){
    return azure.createTableService.restore();
  });
  _it('is defined', function(){
    return expect(AzureStream).to.not.be.undefined;
  });
  describe('.ctor(options:{account, access_key})', function(){
    _it('creates azure client with account and access_key', function(){
      var sut;
      sut = new AzureStream({
        account: 'user',
        access_key: 'secret'
      });
      expect(azure.createTableService).to.have.been.calledOnce.and.calledWith('user', 'secret');
      return expect(sut.client).to.be.equal(client);
    });
    return _it('ensures table', function(){
      var sut;
      sinon.spy(client, 'createTableIfNotExists');
      sut = new AzureStream({
        table: 'foo'
      });
      return expect(client.createTableIfNotExists).to.have.been.calledWith('foo');
    });
  });
  describe('#write(record)', function(){
    var sut;
    beforeEach(function(){
      sut = createDefaultStream();
      return sinon.spy(client, 'insertEntity');
    });
    _it('writes the record to the correct table', function(){
      sut.write("{}");
      return expect(client.insertEntity).to.have.been.calledOnce.and.calledWith('logs');
    });
    _it('adds RowKey and PartitionKey to the record', function(){
      var record;
      record = JSON.stringify({
        name: 'foo'
      });
      sut.write(record);
      return expect(client.insertEntity).to.have.been.calledOnce.and.calledWithMatch(sinon.match.string, {
        RowKey: sinon.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/),
        PartitionKey: 'foo'
      });
    });
    return _it('throws error when not wirtable', function(){
      sut.writable = false;
      return expect(function(){
        return sut.write();
      }).to['throw'](Error, /not writable/);
    });
  });
  describe('#end', function(){
    var sut;
    beforeEach(function(){
      return sut = createDefaultStream();
    });
    return _it('sets the stream to not writable', function(){
      sut.end();
      return expect(sut.writable).to.be['false'];
    });
  });
  return describe('#destroy', function(){
    var sut;
    beforeEach(function(){
      return sut = createDefaultStream();
    });
    _it('sets the stream to not writable', function(){
      sut.destroy();
      return expect(sut.writable).to.be['false'];
    });
    return _it('emits \'close\'', function(done){
      sut.on('close', function(){
        return done();
      });
      return sut.destroy();
    });
  });
});